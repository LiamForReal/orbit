#pragma once 

#include "prime_numbers_manager.h"
#include <vector>
#include "utils.hpp"
#include <thread>
#define _2048_BITS "0x
using std::vector;
class RSA
{
public: 
	RSA();
	void Encrypt(vector<unsigned char>& text);
	void Decrypt(vector<unsigned char>& cipher_text);

protected:
	template <typename T>
	T getRandomPrimeNumber(T lowerBond = 1, T upperBond = 1)
	{
		std::cout << "lower_bond = " << lowerBond << "\n";
		return prime_numbers_manager::getRandomPrimeNumber<T>(lowerBond, upperBond);
	}

private: 
	uint2048_t calcProduct(const uint1024_t& q, const uint1024_t& p);
	uint2048_t calcTotient(const uint1024_t& q, const uint1024_t& p);
	void selectPublicKey();
	void selectPrivateKey(); 

	uint2048_t E; //public_key;
	uint2048_t D; //private_key;
	uint2048_t T; //Totioent
	uint2048_t N; //Product
};