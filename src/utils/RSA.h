#pragma once 

#include "prime_numbers_manager.h"
#include <vector>
#define _2048_BITS "0x
using std::vector;
class RSA
{
public: 
	RSA();
	vector<unsigned char> Encrypt();
	vector<unsigned char> Decrypt();

protected:
	template <typename T>
	T getRandomPrimeNumber()
	{
		if constexpr (std::is_same<T, uint2048_t>::value)
			return prime_numbers_manager::getRandomPrimeNumber2048();
		return prime_numbers_manager::getRandomPrimeNumber1024();
	}

private: 
	uint2048_t calcProduct(const uint1024_t q, const uint1024_t p);
	uint2048_t calcTotient(const uint1024_t q, const uint1024_t p);
	void selectPublicKey();
	void selectPrivateKey(); 

	uint2048_t E; //public_key;
	uint2048_t D; //private_key;
	uint2048_t T; //Totioent
	uint2048_t P; //Product
};